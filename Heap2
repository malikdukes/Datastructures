#include <iostream>
using namespace std;
#include <climits>
template <class Data>     //aalow u to change datatype mke it more generL
//function and declaration
void Maxheap(Data A[], int i, int N)        //function to maxx a node i is the node u maxx n is total number of node

//maxheap (A, i, n)
//L <--Left(i)
//r <--Right(i)
//if L <= l n && A[L] > A[i]
//then largest <-- L
//else largest <-- i
//if r <= n && A[r] > A[largest]
//then largest <-- Right
//if largest not= i
//then exchange A[i] <--> A[larget]
//maxheap(A, Largest, n)
{
int L;
int R;
int largest;
L = 2*i + 1;  //left child index 
R = L + 1;   //right child index
if(L <=N-1 && A[L] > A[i])  //left child
  largest = L;
else largest = i;

if(R <=N-1 && A[R] > A[i]) //right child
  largest = R;
else largest = i;

if(largest != i)    //if i is not equaal to largest
{
  swap (A[i], A[largest]);  // swap i with largest
  Maxheap(A, largest, N); //recursive function
}
}
template <class Data> //function and declaration
void buildmaxheap(Data A[],int N)
{
int i;
for(i = N/2 - 1; i >= 0; i--)
Maxheap(A,  i,  N);
} 
template<class Data>
void heapsort(Data A[], int N)  //function and declaration
{
int i;
for(i = N-1; i >= 1; i--)
  {
  swap(A[0], A[i]);  //swap fist and last value
  Maxheap(A, 0, i-1);
  }
}  
template<class Data>
int Parent(int i);
int Parent(int i)         //function to call parent node
{
return (i - 1)/2;
}


template<class Data>
void Heap_Increase(Data A[], int i, Data key) // i = index of position u try to change    key = data type
{
if(key <= A[i])
{
cout << "New key cannoot be less than existing value "<< endl;
return; //goes back to main
}
A[i] = key; 
         //find out parent node and cmpare
   
while (i > 0 && A[Parent(i)] < A[i])
{
swap(A[i], A[Parent(i)]);
i = Parent(i);
}   
} 

template <class Data>
void HeapInsert(Data A[], Data key, int &N)
{
  N++; //inceaees N
  A[N] = -0;
  Heap_Increase(A, N, key); //N = POS NUMBER 

}
template <class Data>
void HeapDelete(Data A[], int i, int &N)
{
  swap(A[i], A[N]);
  N--;
 Maxheap(A, i, N); 
}

template <class Data>
Data Heap_Extract_Max(Data A[], int & N)
{
  if(N < 1)
  {
    cout << "Empty data structure, add some data first"<< endl;
    exit(1);
  }
  Data max;
  max = A[0];
  swap(A[0], A[N]);
  N--;
  MaxHeapify(A, 0, N);
  return max;
}


int main() 
{
  int N;
  int * A,* B;  //pointer to construct array change int if u wnt to change data type
// b is copy of A
  cout <<"Enter number of Data: ";
  cin >> N;
  A = new int [N];
  B = new int [N];
  int i;
 cout << "Enter:  " << N <<"number of data"<<endl;
  for(i = 0; i <= N-1; i++) 
  cin >> A[i];
  //call buildmaxheap function
 buildmaxheap(A, N);
  cout <<"the max heap is"<<endl;
    for(i = 0; i <= N-1; i++) 
    cout << A[i]<<",";
    cout << endl;
    for(i = 0; i <= N-1; i++) 
    {
      B[i] = A[i];  //copying array
    }         //loop to save data in array B
  heapsort(B, N); //call sortheap
   cout <<"the sorted data is "<<endl;
    for(i = 0; i <= N-1; i++) 
    cout << B[i]<<",";  //call in from B Array
    cout << endl;
int newKey;
int keyPosition;   
cout <<"Enter Position Number and new key value ";
cin >> keyPosition >> newKey;
Heap_Increase(A, keyPosition, newKey);
cout <<"new maxhap is"<<endl;
for(i = 0; i <= N-1; i++) 
    cout << A[i]<<",";  //call in from B Array
    cout << endl; 
   cout << "Enter a data to insert: ";
   int newData;
 cin >> newData;
 HeapInsert(A, newData, N);
 cout << "Number of daeta = " << N << endl;
  cout << "The new maxheap is " << endl;
 for(i = 0; i <= N-1; i++)
   cout << A[i] << ", ";
 cout << endl;

 // to delete a data
 int nodeToDelete;
 cout << "Enter the node you want to delete: ";
 cin >> nodeToDelete;
 HeapDelete(A, nodeToDelete, N);
 cout << "Number of data = " << N << endl;
  cout << "The new maxheap is " << endl;
 for(i = 0; i <= N-1; i++)
   cout << A[i] << ", ";
 cout << endl;

 int maxvalue = Heap_Extract_Max(A, N);
 cout << "N = " << N << "max value =  " << maxvalue << endl;
 

        

return 0;
}
