#include <iostream>
using namespace std;
#include <climits>
#include <fstream>
/*
m  q – p + 1
		n  r – q
		// create arrays L[1, … m+1] and R[1 … n+1]
		for i  0 to m-1
		    do L[i]  A[p + i ]
		for j  0 to n-1
		    do R[j]  A[q + j + 1]
		L[m ] ∞   // sentinel value
		R[n ]  ∞ 
		i  j  0  // both i and j are 1
		for k  p to r
		     do if L[i] <= R[j] 
		           then A[k]  L[i]
		  	     i  i + 1
		           else   A[k]  R[j]
			    j  j + 1

*/
void merge(int A[], int p, int q, int r)
{
int m = q - p + 1;
int n = r - q;
int i;
int * l;
l = new int[m + 1];
int * R;
 R = new int[n + 1];
for(i = 0; i <= m - 1; i++)
{
 l[i] = A[p + i];
}
int j;
for( j = 0; j <= n - 1; j++ )
{
R[j] = A[q + j + 1];
}
l[m] =  INT_MAX;  
R[n] = INT_MAX;
i = j = 0;
int k;
for(k = p; k <= r; k++)
{
  if(l[i] <= R[j])
    {
      A[k] = l[i];
      i = i + 1;
    }
else
{
     A[k] = R[j];
    j = j + 1;
}
}
}



void mergeSort(int A[], int p, int r)

{
int q;  
if(p < r)
{
 q = A[(p + r) / 2];

mergeSort(A, p, r);
mergeSort(A, q +1, r);
merge(A, p, q, r);
}
}
int main()
{
int * A;
int N;
ifstream data;
data.open("data.txt");
cout << "How many data to be sorted: ";
cin >> N;
A = new int[N];

int i;
for(i = 0; i <= N-1; i++)
{
  data >> A[i];
}
mergeSort(A, 0, N-1);
cout <<" Sorted data is ";
for(i = 0; i <= N-1; i++)
{
  cout << A[i] << "-";
}

return 0;
}
